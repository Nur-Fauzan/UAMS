@{
    // View
    View = this;

    // Check action result
    if (usersAdd.ActionResult is EmptyResult) // Terminate page
        return;

    // Layout
    Layout = usersAdd.UseLayout ? "_Layout" : "";
}
<script>
var currentTable = @Html.Raw(ConvertToJson(usersAdd.ToClientVar()));
ew.deepAssign(ew.vars, { tables: { Users: currentTable } });
var currentPageID = ew.PAGE_ID = "add";
var currentForm;
var fUsersadd;
loadjs.ready(["wrapper", "head"], function () {
    let $ = jQuery;
    let fields = currentTable.fields;

    // Form object
    let form = new ew.FormBuilder()
        .setId("fUsersadd")
        .setPageId("add")

        // Add fields
        .setFields([

            ["_Username", [fields._Username.visible && fields._Username.required ? ew.Validators.required(fields._Username.caption) : null], fields._Username.isInvalid],
            ["PasswordHash", [fields.PasswordHash.visible && fields.PasswordHash.required ? ew.Validators.required(fields.PasswordHash.caption) : null], fields.PasswordHash.isInvalid],
            ["_Name", [fields._Name.visible && fields._Name.required ? ew.Validators.required(fields._Name.caption) : null], fields._Name.isInvalid],
            ["PreferredTimezoneID", [fields.PreferredTimezoneID.visible && fields.PreferredTimezoneID.required ? ew.Validators.required(fields.PreferredTimezoneID.caption) : null], fields.PreferredTimezoneID.isInvalid],
            ["UserLevelID", [fields.UserLevelID.visible && fields.UserLevelID.required ? ew.Validators.required(fields.UserLevelID.caption) : null], fields.UserLevelID.isInvalid]
        ])

        // Form_CustomValidate
        .setCustomValidate(
            function(fobj) { // DO NOT CHANGE THIS LINE!
                    // Your custom validation code here, return false if invalid.
                    return true;
                }
        )

        // Use JavaScript validation or not
        .setValidateRequired(ew.CLIENT_VALIDATE)

        // Dynamic selection lists
        .setLists({
            "PreferredTimezoneID": @Html.Raw(usersAdd.PreferredTimezoneID.ToClientList(usersAdd)),
            "UserLevelID": @Html.Raw(usersAdd.UserLevelID.ToClientList(usersAdd)),
        })
        .build();
    window[form.id] = form;
    currentForm = form;
    loadjs.done(form.id);
});
</script>
<script>
loadjs.ready("head", function() {
    // Write your client script here, no need to add script tags.
});
</script>
@usersAdd.ShowPageHeader()
@usersAdd.ShowMessages()
<form name="fUsersadd" id="fUsersadd" class="@(usersAdd.FormClassName)" action="@AppPath(CurrentPageName())" method="post" novalidate autocomplete="off">
@if (CurrentPage?.CheckToken ?? false) {
    <input type="hidden" name="@Config.TokenNameKey" value="@Config.TokenName"><!-- CSRF token name -->
    @Html.AntiForgeryToken()
}
<input type="hidden" name="action" id="action" value="insert">
<input type="hidden" name="modal" value="@ConvertToInt(usersAdd.IsModal)">
@if (IsJsonResponse()) {
<input type="hidden" name="json" value="1">
}
<input type="hidden" name="@(usersAdd.OldKeyName)" value="@Html.Raw(usersAdd.OldKey)">
<div class="ew-add-div"><!-- page* -->
@if (usersAdd._Username.Visible) { // usersAdd._Username.Visible (begin)
    <div id="r__Username" @Html.Raw(usersAdd._Username.RowAttributes)>
        <label id="elh_Users__Username" for="x__Username" class="@(usersAdd.LeftColumnClass)">@Html.Raw(usersAdd._Username.Caption)@Html.Raw(usersAdd._Username.Required ? Language.Phrase("FieldRequiredIndicator") : "")</label>
        <div class="@(usersAdd.RightColumnClass)"><div @Html.Raw(usersAdd._Username.CellAttributes)>
<span id="el_Users__Username">
<input type="@(usersAdd._Username.InputTextType)" name="x__Username" id="x__Username" data-table="Users" data-field="x__Username" value="@Html.Raw(usersAdd._Username.EditValue)" size="30" maxlength="50" placeholder="@Html.Raw(HtmlEncode(usersAdd._Username.PlaceHolder))" data-format-pattern="@(usersAdd._Username.FormatPattern)"@Html.Raw(usersAdd._Username.EditAttributes) aria-describedby="x__Username_help">
@Html.Raw(usersAdd._Username.GetCustomMessage)
<div class="invalid-feedback">@Html.Raw(usersAdd._Username.GetErrorMessage())</div>
</span>
</div></div>
    </div>
} @* usersAdd._Username.Visible (end) *@
@if (usersAdd.PasswordHash.Visible) { // usersAdd.PasswordHash.Visible (begin)
    <div id="r_PasswordHash" @Html.Raw(usersAdd.PasswordHash.RowAttributes)>
        <label id="elh_Users_PasswordHash" for="x_PasswordHash" class="@(usersAdd.LeftColumnClass)">@Html.Raw(usersAdd.PasswordHash.Caption)@Html.Raw(usersAdd.PasswordHash.Required ? Language.Phrase("FieldRequiredIndicator") : "")</label>
        <div class="@(usersAdd.RightColumnClass)"><div @Html.Raw(usersAdd.PasswordHash.CellAttributes)>
<span id="el_Users_PasswordHash">
<div class="input-group">
    <input type="password" name="x_PasswordHash" id="x_PasswordHash" autocomplete="new-password" data-field="x_PasswordHash" size="30" maxlength="255" placeholder="@(HtmlEncode(usersAdd.PasswordHash.PlaceHolder))"@Html.Raw(usersAdd.PasswordHash.EditAttributes) aria-describedby="x_PasswordHash_help">
    <button type="button" class="btn btn-default ew-toggle-password rounded-end" data-ew-action="password"><i class="fa-solid fa-eye"></i></button>
</div>
@Html.Raw(usersAdd.PasswordHash.GetCustomMessage)
<div class="invalid-feedback">@Html.Raw(usersAdd.PasswordHash.GetErrorMessage())</div>
</span>
</div></div>
    </div>
} @* usersAdd.PasswordHash.Visible (end) *@
@if (usersAdd._Name.Visible) { // usersAdd._Name.Visible (begin)
    <div id="r__Name" @Html.Raw(usersAdd._Name.RowAttributes)>
        <label id="elh_Users__Name" for="x__Name" class="@(usersAdd.LeftColumnClass)">@Html.Raw(usersAdd._Name.Caption)@Html.Raw(usersAdd._Name.Required ? Language.Phrase("FieldRequiredIndicator") : "")</label>
        <div class="@(usersAdd.RightColumnClass)"><div @Html.Raw(usersAdd._Name.CellAttributes)>
<span id="el_Users__Name">
<input type="@(usersAdd._Name.InputTextType)" name="x__Name" id="x__Name" data-table="Users" data-field="x__Name" value="@Html.Raw(usersAdd._Name.EditValue)" size="30" maxlength="100" placeholder="@Html.Raw(HtmlEncode(usersAdd._Name.PlaceHolder))" data-format-pattern="@(usersAdd._Name.FormatPattern)"@Html.Raw(usersAdd._Name.EditAttributes) aria-describedby="x__Name_help">
@Html.Raw(usersAdd._Name.GetCustomMessage)
<div class="invalid-feedback">@Html.Raw(usersAdd._Name.GetErrorMessage())</div>
</span>
</div></div>
    </div>
} @* usersAdd._Name.Visible (end) *@
@if (usersAdd.PreferredTimezoneID.Visible) { // usersAdd.PreferredTimezoneID.Visible (begin)
    <div id="r_PreferredTimezoneID" @Html.Raw(usersAdd.PreferredTimezoneID.RowAttributes)>
        <label id="elh_Users_PreferredTimezoneID" for="x_PreferredTimezoneID" class="@(usersAdd.LeftColumnClass)">@Html.Raw(usersAdd.PreferredTimezoneID.Caption)@Html.Raw(usersAdd.PreferredTimezoneID.Required ? Language.Phrase("FieldRequiredIndicator") : "")</label>
        <div class="@(usersAdd.RightColumnClass)"><div @Html.Raw(usersAdd.PreferredTimezoneID.CellAttributes)>
<span id="el_Users_PreferredTimezoneID">
    <select
        id="x_PreferredTimezoneID"
        name="x_PreferredTimezoneID"
        class="form-select ew-select@(usersAdd.PreferredTimezoneID.IsInvalidClass)"
        data-select2-id="fUsersadd_x_PreferredTimezoneID"
        data-table="Users"
        data-field="x_PreferredTimezoneID"
        data-value-separator="@(usersAdd.PreferredTimezoneID.DisplayValueSeparatorAttribute)"
        data-placeholder="@(HtmlEncode(usersAdd.PreferredTimezoneID.PlaceHolder))"
        @Html.Raw(usersAdd.PreferredTimezoneID.EditAttributes)>
        @(usersAdd.PreferredTimezoneID.SelectOptionListHtml("x_PreferredTimezoneID"))
    </select>
    @Html.Raw(usersAdd.PreferredTimezoneID.GetCustomMessage)
    <div class="invalid-feedback">@Html.Raw(usersAdd.PreferredTimezoneID.GetErrorMessage())</div>
@Html.Raw(usersAdd.PreferredTimezoneID.Lookup.GetParamTag(usersAdd, "p_x_PreferredTimezoneID"))
<script>
loadjs.ready("fUsersadd", function() {
    var options = { name: "x_PreferredTimezoneID", selectId: "fUsersadd_x_PreferredTimezoneID" },
        el = document.querySelector("select[data-select2-id='" + options.selectId + "']");
    if (!el)
        return;
    options.closeOnSelect = !options.multiple;
    options.dropdownParent = el.closest("#ew-modal-dialog, #ew-add-opt-dialog");
    if (fUsersadd.lists.PreferredTimezoneID?.lookupOptions.length) {
        options.data = { id: "x_PreferredTimezoneID", form: "fUsersadd" };
    } else {
        options.ajax = { id: "x_PreferredTimezoneID", form: "fUsersadd", limit: ew.LOOKUP_PAGE_SIZE };
    }
    options.minimumResultsForSearch = Infinity;
    options = Object.assign({}, ew.selectOptions, options, ew.vars.tables.Users.fields.PreferredTimezoneID.selectOptions);
    ew.createSelect(options);
});
</script>
</span>
</div></div>
    </div>
} @* usersAdd.PreferredTimezoneID.Visible (end) *@
@if (usersAdd.UserLevelID.Visible) { // usersAdd.UserLevelID.Visible (begin)
    <div id="r_UserLevelID" @Html.Raw(usersAdd.UserLevelID.RowAttributes)>
        <label id="elh_Users_UserLevelID" for="x_UserLevelID" class="@(usersAdd.LeftColumnClass)">@Html.Raw(usersAdd.UserLevelID.Caption)@Html.Raw(usersAdd.UserLevelID.Required ? Language.Phrase("FieldRequiredIndicator") : "")</label>
        <div class="@(usersAdd.RightColumnClass)"><div @Html.Raw(usersAdd.UserLevelID.CellAttributes)>
@if (!Security.IsAdmin && Security.IsLoggedIn) { // Non system admin
<span id="el_Users_UserLevelID">
<span class="form-control-plaintext">@Html.Raw(usersAdd.UserLevelID.DisplayValue(usersAdd.UserLevelID.EditValue))</span>
</span>
} else {
<span id="el_Users_UserLevelID">
    <select
        id="x_UserLevelID"
        name="x_UserLevelID"
        class="form-select ew-select@(usersAdd.UserLevelID.IsInvalidClass)"
        data-select2-id="fUsersadd_x_UserLevelID"
        data-table="Users"
        data-field="x_UserLevelID"
        data-value-separator="@(usersAdd.UserLevelID.DisplayValueSeparatorAttribute)"
        data-placeholder="@(HtmlEncode(usersAdd.UserLevelID.PlaceHolder))"
        @Html.Raw(usersAdd.UserLevelID.EditAttributes)>
        @(usersAdd.UserLevelID.SelectOptionListHtml("x_UserLevelID"))
    </select>
    @Html.Raw(usersAdd.UserLevelID.GetCustomMessage)
    <div class="invalid-feedback">@Html.Raw(usersAdd.UserLevelID.GetErrorMessage())</div>
@Html.Raw(usersAdd.UserLevelID.Lookup.GetParamTag(usersAdd, "p_x_UserLevelID"))
<script>
loadjs.ready("fUsersadd", function() {
    var options = { name: "x_UserLevelID", selectId: "fUsersadd_x_UserLevelID" },
        el = document.querySelector("select[data-select2-id='" + options.selectId + "']");
    if (!el)
        return;
    options.closeOnSelect = !options.multiple;
    options.dropdownParent = el.closest("#ew-modal-dialog, #ew-add-opt-dialog");
    if (fUsersadd.lists.UserLevelID?.lookupOptions.length) {
        options.data = { id: "x_UserLevelID", form: "fUsersadd" };
    } else {
        options.ajax = { id: "x_UserLevelID", form: "fUsersadd", limit: ew.LOOKUP_PAGE_SIZE };
    }
    options.minimumResultsForSearch = Infinity;
    options = Object.assign({}, ew.selectOptions, options, ew.vars.tables.Users.fields.UserLevelID.selectOptions);
    ew.createSelect(options);
});
</script>
</span>
}
</div></div>
    </div>
} @* usersAdd.UserLevelID.Visible (end) *@
</div><!-- /page* -->
@{ usersAdd.CloseRecordset(); }
@Html.Raw(usersAdd.IsModal ? "<template class=\"ew-modal-buttons\">" : "<div class=\"row ew-buttons\">")<!-- buttons .row -->
    <div class="@(usersAdd.OffsetColumnClass)"><!-- buttons offset -->
    <button class="btn btn-primary ew-btn" name="btn-action" id="btn-action" type="submit" form="fUsersadd">@Html.Raw(Language.Phrase("AddBtn"))</button>
@if (IsJsonResponse()) {
    <button class="btn btn-default ew-btn" name="btn-cancel" id="btn-cancel" type="button" data-bs-dismiss="modal">@Html.Raw(Language.Phrase("CancelBtn"))</button>
} else {
    <button class="btn btn-default ew-btn" name="btn-cancel" id="btn-cancel" type="button" form="fUsersadd" data-href="@AppPath(usersAdd.ReturnUrl)">@Html.Raw(Language.Phrase("CancelBtn"))</button>
}
    </div><!-- /buttons offset -->
@Html.Raw(usersAdd.IsModal ? "</template>" : "</div>")<!-- /buttons .row -->
</form>
@usersAdd.ShowPageFooter()
@Html.Raw(GetDebugMessage())
@ElapsedTime()
<script>
// Field event handlers
loadjs.ready("head", function() {
    ew.addEventHandlers("Users");
});
</script>
<script>
loadjs.ready("load", function() {
    // Write your table-specific startup script here
    // document.write("page loaded");
});
</script>
