@{
    // View
    View = this;

    // Check action result
    if (appointmentsDelete.ActionResult is EmptyResult) // Terminate page
        return;

    // Layout
    Layout = appointmentsDelete.UseLayout ? "_Layout" : "";
}
<script>
var currentTable = @Html.Raw(ConvertToJson(appointmentsDelete.ToClientVar()));
ew.deepAssign(ew.vars, { tables: { Appointments: currentTable } });
var currentPageID = ew.PAGE_ID = "delete";
var currentForm;
var fAppointmentsdelete;
loadjs.ready(["wrapper", "head"], function () {
    let $ = jQuery;
    let fields = currentTable.fields;

    // Form object
    let form = new ew.FormBuilder()
        .setId("fAppointmentsdelete")
        .setPageId("delete")
        .build();
    window[form.id] = form;
    currentForm = form;
    loadjs.done(form.id);
});
</script>
<script>
loadjs.ready("head", function() {
    // Write your client script here, no need to add script tags.
});
</script>
@appointmentsDelete.ShowPageHeader()
@appointmentsDelete.ShowMessages()
<form name="fAppointmentsdelete" id="fAppointmentsdelete" class="ew-form ew-delete-form" action="@AppPath(CurrentPageName())" method="post" novalidate autocomplete="off">
@if (CurrentPage?.CheckToken ?? false) {
    <input type="hidden" name="@Config.TokenNameKey" value="@Config.TokenName"><!-- CSRF token name -->
    @Html.AntiForgeryToken()
}
<input type="hidden" name="action" id="action" value="delete">
@foreach (string key in appointmentsDelete.RecordKeys) {
<input type="hidden" name="key_m[]" value="@key">
}
<div class="card ew-card ew-grid @(appointmentsDelete.TableGridClass)">
<div class="card-body ew-grid-middle-panel @(appointmentsDelete.TableContainerClass)" style="@(appointmentsDelete.TableContainerStyle)">
<table class="@(appointmentsDelete.TableClass)">
    <thead>
    <tr class="ew-table-header">
@if (appointmentsDelete.Id.Visible) { // appointmentsDelete.Id.Visible (begin)
        <th class="@Html.Raw(appointmentsDelete.Id.HeaderCellClass)"><span id="elh_Appointments_Id" class="Appointments_Id">@Html.Raw(appointmentsDelete.Id.Caption)</span></th>
} @* appointmentsDelete.Id.Visible (end) *@
@if (appointmentsDelete._Title.Visible) { // appointmentsDelete._Title.Visible (begin)
        <th class="@Html.Raw(appointmentsDelete._Title.HeaderCellClass)"><span id="elh_Appointments__Title" class="Appointments__Title">@Html.Raw(appointmentsDelete._Title.Caption)</span></th>
} @* appointmentsDelete._Title.Visible (end) *@
@if (appointmentsDelete._StartTime.Visible) { // appointmentsDelete._StartTime.Visible (begin)
        <th class="@Html.Raw(appointmentsDelete._StartTime.HeaderCellClass)"><span id="elh_Appointments__StartTime" class="Appointments__StartTime">@Html.Raw(appointmentsDelete._StartTime.Caption)</span></th>
} @* appointmentsDelete._StartTime.Visible (end) *@
@if (appointmentsDelete.EndTime.Visible) { // appointmentsDelete.EndTime.Visible (begin)
        <th class="@Html.Raw(appointmentsDelete.EndTime.HeaderCellClass)"><span id="elh_Appointments_EndTime" class="Appointments_EndTime">@Html.Raw(appointmentsDelete.EndTime.Caption)</span></th>
} @* appointmentsDelete.EndTime.Visible (end) *@
@if (appointmentsDelete.CreatedBy.Visible) { // appointmentsDelete.CreatedBy.Visible (begin)
        <th class="@Html.Raw(appointmentsDelete.CreatedBy.HeaderCellClass)"><span id="elh_Appointments_CreatedBy" class="Appointments_CreatedBy">@Html.Raw(appointmentsDelete.CreatedBy.Caption)</span></th>
} @* appointmentsDelete.CreatedBy.Visible (end) *@
@if (appointmentsDelete.Timezone.Visible) { // appointmentsDelete.Timezone.Visible (begin)
        <th class="@Html.Raw(appointmentsDelete.Timezone.HeaderCellClass)"><span id="elh_Appointments_Timezone" class="Appointments_Timezone">@Html.Raw(appointmentsDelete.Timezone.Caption)</span></th>
} @* appointmentsDelete.Timezone.Visible (end) *@
    </tr>
    </thead>
    <tbody>
@{ appointmentsDelete.RecordCount = 0; }
@while (appointmentsDelete.Recordset != null && await appointmentsDelete.Recordset.ReadAsync()) { // DN
    appointmentsDelete.RecordCount++;
    appointmentsDelete.RowCount++;

    // Set row properties
    appointmentsDelete.ResetAttributes();
    appointmentsDelete.RowType = RowType.View; // View

    // Get the field contents
    await appointmentsDelete.LoadRowValues(appointmentsDelete.Recordset);

    // Render row
    await appointmentsDelete.RenderRow();
    <tr @Html.Raw(appointmentsDelete.RowAttributes)>
@if (appointmentsDelete.Id.Visible) { // appointmentsDelete.Id.Visible (begin)
        <td @Html.Raw(appointmentsDelete.Id.CellAttributes)>
<span id="">
<span @Html.Raw(appointmentsDelete.Id.ViewAttributes)>
@Html.Raw(appointmentsDelete.Id.GetViewValue())</span>
</span></td>
} @* appointmentsDelete.Id.Visible (end) *@
@if (appointmentsDelete._Title.Visible) { // appointmentsDelete._Title.Visible (begin)
        <td @Html.Raw(appointmentsDelete._Title.CellAttributes)>
<span id="">
<span @Html.Raw(appointmentsDelete._Title.ViewAttributes)>
@Html.Raw(appointmentsDelete._Title.GetViewValue())</span>
</span></td>
} @* appointmentsDelete._Title.Visible (end) *@
@if (appointmentsDelete._StartTime.Visible) { // appointmentsDelete._StartTime.Visible (begin)
        <td @Html.Raw(appointmentsDelete._StartTime.CellAttributes)>
<span id="">
<span @Html.Raw(appointmentsDelete._StartTime.ViewAttributes)>
@Html.Raw(appointmentsDelete._StartTime.GetViewValue())</span>
</span></td>
} @* appointmentsDelete._StartTime.Visible (end) *@
@if (appointmentsDelete.EndTime.Visible) { // appointmentsDelete.EndTime.Visible (begin)
        <td @Html.Raw(appointmentsDelete.EndTime.CellAttributes)>
<span id="">
<span @Html.Raw(appointmentsDelete.EndTime.ViewAttributes)>
@Html.Raw(appointmentsDelete.EndTime.GetViewValue())</span>
</span></td>
} @* appointmentsDelete.EndTime.Visible (end) *@
@if (appointmentsDelete.CreatedBy.Visible) { // appointmentsDelete.CreatedBy.Visible (begin)
        <td @Html.Raw(appointmentsDelete.CreatedBy.CellAttributes)>
<span id="">
<span @Html.Raw(appointmentsDelete.CreatedBy.ViewAttributes)>
@Html.Raw(appointmentsDelete.CreatedBy.GetViewValue())</span>
</span></td>
} @* appointmentsDelete.CreatedBy.Visible (end) *@
@if (appointmentsDelete.Timezone.Visible) { // appointmentsDelete.Timezone.Visible (begin)
        <td @Html.Raw(appointmentsDelete.Timezone.CellAttributes)>
<span id="">
<span @Html.Raw(appointmentsDelete.Timezone.ViewAttributes)>
@Html.Raw(appointmentsDelete.Timezone.GetViewValue())</span>
</span></td>
} @* appointmentsDelete.Timezone.Visible (end) *@
    </tr>
}
@{ appointmentsDelete.CloseRecordset(); }
</tbody>
</table>
</div>
</div>
<div class="ew-buttons ew-desktop-buttons">
<button class="btn btn-primary ew-btn" name="btn-action" id="btn-action" type="submit">@Html.Raw(Language.Phrase("DeleteBtn"))</button>
<button class="btn btn-default ew-btn" name="btn-cancel" id="btn-cancel" type="button" data-href="@AppPath(appointmentsDelete.ReturnUrl)">@Html.Raw(Language.Phrase("CancelBtn"))</button>
</div>
</form>
@appointmentsDelete.ShowPageFooter()
@Html.Raw(GetDebugMessage())
@ElapsedTime()
<script>
loadjs.ready("load", function() {
    // Write your table-specific startup script here
    // document.write("page loaded");
});
</script>
