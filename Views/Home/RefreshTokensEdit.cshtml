@{
    // View
    View = this;

    // Check action result
    if (refreshTokensEdit.ActionResult is EmptyResult) // Terminate page
        return;

    // Layout
    Layout = refreshTokensEdit.UseLayout ? "_Layout" : "";
}
@refreshTokensEdit.ShowPageHeader()
@refreshTokensEdit.ShowMessages()
<main class="edit">
<form name="fRefreshTokensedit" id="fRefreshTokensedit" class="@(refreshTokensEdit.FormClassName)" action="@AppPath(CurrentPageName())" method="post" novalidate autocomplete="off">
<script>
var currentTable = @Html.Raw(ConvertToJson(refreshTokensEdit.ToClientVar()));
ew.deepAssign(ew.vars, { tables: { RefreshTokens: currentTable } });
var currentPageID = ew.PAGE_ID = "edit";
var currentForm;
var fRefreshTokensedit;
loadjs.ready(["wrapper", "head"], function () {
    let $ = jQuery;
    let fields = currentTable.fields;

    // Form object
    let form = new ew.FormBuilder()
        .setId("fRefreshTokensedit")
        .setPageId("edit")

        // Add fields
        .setFields([

            ["Id", [fields.Id.visible && fields.Id.required ? ew.Validators.required(fields.Id.caption) : null], fields.Id.isInvalid],
            ["UserId", [fields.UserId.visible && fields.UserId.required ? ew.Validators.required(fields.UserId.caption) : null, ew.Validators.integer], fields.UserId.isInvalid],
            ["_Token", [fields._Token.visible && fields._Token.required ? ew.Validators.required(fields._Token.caption) : null], fields._Token.isInvalid],
            ["ExpiryDate", [fields.ExpiryDate.visible && fields.ExpiryDate.required ? ew.Validators.required(fields.ExpiryDate.caption) : null, ew.Validators.datetime(fields.ExpiryDate.clientFormatPattern)], fields.ExpiryDate.isInvalid]
        ])

        // Form_CustomValidate
        .setCustomValidate(
            function(fobj) { // DO NOT CHANGE THIS LINE!
                    // Your custom validation code here, return false if invalid.
                    return true;
                }
        )

        // Use JavaScript validation or not
        .setValidateRequired(ew.CLIENT_VALIDATE)

        // Dynamic selection lists
        .setLists({
        })
        .build();
    window[form.id] = form;
    currentForm = form;
    loadjs.done(form.id);
});
</script>
<script>
loadjs.ready("head", function() {
    // Write your client script here, no need to add script tags.
});
</script>
@if (CurrentPage?.CheckToken ?? false) {
    <input type="hidden" name="@Config.TokenNameKey" value="@Config.TokenName"><!-- CSRF token name -->
    @Html.AntiForgeryToken()
}
<input type="hidden" name="action" id="action" value="update">
<input type="hidden" name="modal" value="@ConvertToInt(refreshTokensEdit.IsModal)">
@if (IsJsonResponse()) {
<input type="hidden" name="json" value="1">
}
<input type="hidden" name="@(refreshTokensEdit.OldKeyName)" value="@Html.Raw(refreshTokensEdit.OldKey)">
<div class="ew-edit-div"><!-- page* -->
@if (refreshTokensEdit.Id.Visible) { // refreshTokensEdit.Id.Visible (begin)
    <div id="r_Id" @Html.Raw(refreshTokensEdit.Id.RowAttributes)>
        <label id="elh_RefreshTokens_Id" class="@(refreshTokensEdit.LeftColumnClass)">@Html.Raw(refreshTokensEdit.Id.Caption)@Html.Raw(refreshTokensEdit.Id.Required ? Language.Phrase("FieldRequiredIndicator") : "")</label>
        <div class="@(refreshTokensEdit.RightColumnClass)"><div @Html.Raw(refreshTokensEdit.Id.CellAttributes)>
<span id="el_RefreshTokens_Id">
<span @Html.Raw(refreshTokensEdit.Id.ViewAttributes)>
<input type="text" readonly class="form-control-plaintext" value="@Html.Raw(RemoveHtml(ConvertToString(refreshTokensEdit.Id.EditValue)))"></span>
<input type="hidden" data-table="RefreshTokens" data-field="x_Id" data-hidden="1" name="x_Id" id="x_Id" value="@Html.Raw(HtmlEncode(refreshTokensEdit.Id.CurrentValue))">
</span>
</div></div>
    </div>
} @* refreshTokensEdit.Id.Visible (end) *@
@if (refreshTokensEdit.UserId.Visible) { // refreshTokensEdit.UserId.Visible (begin)
    <div id="r_UserId" @Html.Raw(refreshTokensEdit.UserId.RowAttributes)>
        <label id="elh_RefreshTokens_UserId" for="x_UserId" class="@(refreshTokensEdit.LeftColumnClass)">@Html.Raw(refreshTokensEdit.UserId.Caption)@Html.Raw(refreshTokensEdit.UserId.Required ? Language.Phrase("FieldRequiredIndicator") : "")</label>
        <div class="@(refreshTokensEdit.RightColumnClass)"><div @Html.Raw(refreshTokensEdit.UserId.CellAttributes)>
<span id="el_RefreshTokens_UserId">
<input type="@(refreshTokensEdit.UserId.InputTextType)" name="x_UserId" id="x_UserId" data-table="RefreshTokens" data-field="x_UserId" value="@Html.Raw(refreshTokensEdit.UserId.EditValue)" size="30" placeholder="@Html.Raw(HtmlEncode(refreshTokensEdit.UserId.PlaceHolder))" data-format-pattern="@(refreshTokensEdit.UserId.FormatPattern)"@Html.Raw(refreshTokensEdit.UserId.EditAttributes) aria-describedby="x_UserId_help">
@Html.Raw(refreshTokensEdit.UserId.GetCustomMessage)
<div class="invalid-feedback">@Html.Raw(refreshTokensEdit.UserId.GetErrorMessage())</div>
</span>
</div></div>
    </div>
} @* refreshTokensEdit.UserId.Visible (end) *@
@if (refreshTokensEdit._Token.Visible) { // refreshTokensEdit._Token.Visible (begin)
    <div id="r__Token" @Html.Raw(refreshTokensEdit._Token.RowAttributes)>
        <label id="elh_RefreshTokens__Token" for="x__Token" class="@(refreshTokensEdit.LeftColumnClass)">@Html.Raw(refreshTokensEdit._Token.Caption)@Html.Raw(refreshTokensEdit._Token.Required ? Language.Phrase("FieldRequiredIndicator") : "")</label>
        <div class="@(refreshTokensEdit.RightColumnClass)"><div @Html.Raw(refreshTokensEdit._Token.CellAttributes)>
<span id="el_RefreshTokens__Token">
<input type="@(refreshTokensEdit._Token.InputTextType)" name="x__Token" id="x__Token" data-table="RefreshTokens" data-field="x__Token" value="@Html.Raw(refreshTokensEdit._Token.EditValue)" size="30" maxlength="255" placeholder="@Html.Raw(HtmlEncode(refreshTokensEdit._Token.PlaceHolder))" data-format-pattern="@(refreshTokensEdit._Token.FormatPattern)"@Html.Raw(refreshTokensEdit._Token.EditAttributes) aria-describedby="x__Token_help">
@Html.Raw(refreshTokensEdit._Token.GetCustomMessage)
<div class="invalid-feedback">@Html.Raw(refreshTokensEdit._Token.GetErrorMessage())</div>
</span>
</div></div>
    </div>
} @* refreshTokensEdit._Token.Visible (end) *@
@if (refreshTokensEdit.ExpiryDate.Visible) { // refreshTokensEdit.ExpiryDate.Visible (begin)
    <div id="r_ExpiryDate" @Html.Raw(refreshTokensEdit.ExpiryDate.RowAttributes)>
        <label id="elh_RefreshTokens_ExpiryDate" for="x_ExpiryDate" class="@(refreshTokensEdit.LeftColumnClass)">@Html.Raw(refreshTokensEdit.ExpiryDate.Caption)@Html.Raw(refreshTokensEdit.ExpiryDate.Required ? Language.Phrase("FieldRequiredIndicator") : "")</label>
        <div class="@(refreshTokensEdit.RightColumnClass)"><div @Html.Raw(refreshTokensEdit.ExpiryDate.CellAttributes)>
<span id="el_RefreshTokens_ExpiryDate">
<input type="@(refreshTokensEdit.ExpiryDate.InputTextType)" name="x_ExpiryDate" id="x_ExpiryDate" data-table="RefreshTokens" data-field="x_ExpiryDate" value="@Html.Raw(refreshTokensEdit.ExpiryDate.EditValue)" placeholder="@Html.Raw(HtmlEncode(refreshTokensEdit.ExpiryDate.PlaceHolder))" data-format-pattern="@(refreshTokensEdit.ExpiryDate.FormatPattern)"@Html.Raw(refreshTokensEdit.ExpiryDate.EditAttributes) aria-describedby="x_ExpiryDate_help">
@Html.Raw(refreshTokensEdit.ExpiryDate.GetCustomMessage)
<div class="invalid-feedback">@Html.Raw(refreshTokensEdit.ExpiryDate.GetErrorMessage())</div>
@if (!refreshTokensEdit.ExpiryDate.ReadOnly && !refreshTokensEdit.ExpiryDate.Disabled && !refreshTokensEdit.ExpiryDate.EditAttrs.Is("readonly") && !refreshTokensEdit.ExpiryDate.EditAttrs.Is("disabled")) {
<script>
loadjs.ready(["fRefreshTokensedit", "datetimepicker"], function () {
    let format = "@Html.Raw(DateFormat(0))", // DN
        options = {
                localization: {
                    locale: ew.LANGUAGE_ID + "-u-nu-" + ew.getNumberingSystem(),
                    hourCycle: format.match(/H/) ? "h24" : "h12",
                    format,
                    ...ew.language.phrase("datetimepicker")
                },
                display: {
                    icons: {
                        previous: ew.IS_RTL ? "fa-solid fa-chevron-right" : "fa-solid fa-chevron-left",
                        next: ew.IS_RTL ? "fa-solid fa-chevron-left" : "fa-solid fa-chevron-right"
                    },
                    components: {
                        clock: !!format.match(/h/i) || !!format.match(/m/) || !!format.match(/s/i),
                        hours: !!format.match(/h/i),
                        minutes: !!format.match(/m/),
                        seconds: !!format.match(/s/i)
                    },
                theme: ew.getPreferredTheme()
                }
            };
    ew.createDateTimePicker("fRefreshTokensedit", "x_ExpiryDate", ew.deepAssign({"useCurrent":false,"display":{"sideBySide":false}}, options));
});
</script>
}
</span>
</div></div>
    </div>
} @* refreshTokensEdit.ExpiryDate.Visible (end) *@
</div><!-- /page* -->
@{ refreshTokensEdit.CloseRecordset(); }
@Html.Raw(refreshTokensEdit.IsModal ? "<template class=\"ew-modal-buttons\">" : "<div class=\"row ew-buttons\">")<!-- buttons .row -->
    <div class="@(refreshTokensEdit.OffsetColumnClass)"><!-- buttons offset -->
    <button class="btn btn-primary ew-btn" name="btn-action" id="btn-action" type="submit" form="fRefreshTokensedit">@Html.Raw(Language.Phrase("SaveBtn"))</button>
@if (IsJsonResponse()) {
    <button class="btn btn-default ew-btn" name="btn-cancel" id="btn-cancel" type="button" data-bs-dismiss="modal">@Html.Raw(Language.Phrase("CancelBtn"))</button>
} else {
    <button class="btn btn-default ew-btn" name="btn-cancel" id="btn-cancel" type="button" form="fRefreshTokensedit" data-href="@AppPath(refreshTokensEdit.ReturnUrl)">@Html.Raw(Language.Phrase("CancelBtn"))</button>
}
    </div><!-- /buttons offset -->
@Html.Raw(refreshTokensEdit.IsModal ? "</template>" : "</div>")<!-- /buttons .row -->
</form>
</main>
@refreshTokensEdit.ShowPageFooter()
@Html.Raw(GetDebugMessage())
@ElapsedTime()
<script>
// Field event handlers
loadjs.ready("head", function() {
    ew.addEventHandlers("RefreshTokens");
});
</script>
<script>
loadjs.ready("load", function() {
    // Write your table-specific startup script here
    // document.write("page loaded");
});
</script>
